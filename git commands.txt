#1. Create a local folder and initialize it for git;

	git init git_example
	cd git_example/

#2. Create a text file in the folder and commit it;

	git add new_text_file.txt
	git commit -m "1 commit"

#3. Create a remote repository on GitHub;

	
	git remote add origin https://github.com/konvert175/repository.git

#4. Push the local repository to GitHub;
	
	(before that, opened github.com and created repository manually)
	git push origin master

#5. Create a new branch (develop) and switch to it;

	git checkout -b develop

#6. Create a new branch from 'develop' and switch to it;

	git checkout -b develop2

#7. Add the first line in the text file, commit, and push to remote;

	git add new_text_file.txt
	git commit -m "3 commit"
	git push --set-upstream origin develop2
or
	git push -u origin develop2

#8. Clone your repository from GitHub into a separate folder;
	
	(another git bashe client)
	git clone https://github.com/konvert175/repository.git
	cd repository/
	git branch -a

#9. Create another branch from 'develop' and switch to it using cloned project;
	
	git checkout develop
	git checkout -b develop_in_separate

#10. Add the first line of the text file (different from the first branch), 
    commit, and push on remote;
	
	git status
	giit add new_text_file.xt
	git commit -m "4 commit"
	git push -u origin develop_in_separate
	
#11. Switch to develop;

	git checkout develop

#12  Merge the first branch and push changes;

	git merge origin/develop2
	git push

#13. Merge the second branch and push changes;

	git merge origin/develop_in_separate

#14. Resolve conflict;

	(manually fixed new_text_file.txt file)

#16. Commit and push a separate text file with a list of all the commands, which were used to solve the problem;

	git add new_text_file.txt
	git commit -m "fix merge1"
	git push
	